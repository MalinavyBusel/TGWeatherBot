import ast
import httpx

from aiogram import Bot, types
from aiogram.dispatcher import Dispatcher
from aiogram.utils import executor

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

from config.config import weather_api_config, bot_config

weather_api_version = weather_api_config.VERSION
weather_api_key = weather_api_config.KEY
bot_token = bot_config.TOKEN

bot = Bot(bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


class UserState(StatesGroup):
    location = State()


@dp.message_handler(state="*", commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("""–ü—Ä–∏–≤–µ—Ç!
–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã!
–î–ª—è —ç—Ç–æ–≥–æ –æ—Ç–∫—Ä–æ–π '–í–ª–æ–∂–µ–Ω–∏—è -> –ì–µ–æ–ø–æ–∑–∏—Ü–∏—è' –∏ –Ω–∞–∂–º–∏ '–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é'.""")


@dp.message_handler(state="*", commands=["set_location"])
async def define_constant_location(message: types.Message):
    await UserState.location.set()
    await message.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /weather.")


@dp.message_handler(state=UserState.location, content_types=["location"])
async def process_location(message: types.Message, state: FSMContext):
    await state.set_state(state=str((message.location.latitude, message.location.longitude)))
    await message.reply(f"–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –¥–ª—è /weather —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")


@dp.message_handler(state=UserState.location)
async def process_invalid_location(message: types.Message, state: FSMContext):
    await message.reply(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é.")


@dp.message_handler(state='*', commands=["weather"])
async def get_predefined_location_forecast(message: types.Message):
    state = await dp.current_state(user=message.from_user.id).get_state()
    if state is None:
        await message.reply("""–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É /weather,
—Ç.–∫. –Ω–µ –±—ã–ª–æ –∑–∞–¥–∞–Ω–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ. –î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, 
–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_location""")
        return

    lat, lon = ast.literal_eval(state)
    forecast = await get_forecast(lat, lon)
    await message.reply(forecast)


@dp.message_handler(state="*", content_types=['location'])
async def handle_location(message: types.Message):
    lat = message.location.latitude
    lon = message.location.longitude

    forecast = await get_forecast(lat, lon)
    await message.reply(forecast)


def get_temp_celsius(kelvin: float):
    return int(kelvin - 273.15)


async def get_forecast(lat, lon):
    async with httpx.AsyncClient() as client:
        resp = await client.get(f"https://api.openweathermap.org/data/{weather_api_version}/weather?lat={lat}&lon={lon}&appid={weather_api_key}")
        resp_data = resp.json()

    return create_forecast_message(resp_data)


def create_forecast_message(resp_data):
    return f"""–ù–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç: {resp_data['name']},
—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {get_temp_celsius(resp_data['main']['temp'])}¬∞C,
–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {get_temp_celsius(resp_data['main']['feels_like'])}¬∞C,
–≤–µ—Ç–µ—Ä: {resp_data['wind']['speed']}–º/—Å, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {get_wind_direction(resp_data['wind']['deg'])},
{resp_data['weather'][0]['description']} {get_weather_emoji(resp_data['weather'][0]['id'])*3}"""


def get_wind_direction(degree):
    if degree < 22.5 or degree > 337.5:
        return "N"
    elif degree < 67.5:
        return "NE"
    elif degree < 112.5:
        return "E"
    elif degree < 157.5:
        return "SE"
    elif degree < 202.5:
        return "S"
    elif degree < 247.5:
        return "SW"
    elif degree < 292.5:
        return "W"
    elif degree < 337.5:
        return "NW"


def get_weather_emoji(ID):
    if ID in range(200, 203) or ID in range(230, 233):
        return "‚õà"  # thunderstorm with rain
    elif ID in range(210, 213):
        return "üå©"  # thunderstorm
    elif ID in range(300, 322) or ID in range(500, 532):
        return "üåß"  # rain or drizzle
    elif ID in range(600, 623):
        return "üå®"  # snow
    elif ID in range(701, 763):
        return "üå´"  # mist, fog and other
    elif ID == 771:
        return "üå¨"  # squall
    elif ID == 781:
        return "üå™"  # tornado
    elif ID == 800:
        return "‚òÄ"  # clear sky
    elif ID == 801 or ID == 802:
        return "üå§"  # few clouds
    elif ID == 803 or ID == 804:
        return "üå•"  # broken clouds


if __name__ == '__main__':
    executor.start_polling(dp)
